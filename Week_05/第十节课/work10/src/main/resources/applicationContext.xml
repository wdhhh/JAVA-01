<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                        http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
                        http://www.springframework.org/schema/context
                        http://www.springframework.org/schema/context/spring-context-3.2.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd">

  <!--bean还有一些参数，比如 init-method 创建出来以后就会调用这个初始化方法
    destroy-method 被销毁时会调用的方法
    autowire(byName,byType) byname,按照这个bean的名字注入,byType按类型，如有两个相同类型，就会报错-->

    <bean id="student123"
          class="work.starter.Student">
        <property name="id" value="123" />
        <property name="name" value="KK123" />
    </bean>

    <bean id="student100"
          class="work.starter.Student">
        <property name="id" value="100" />
        <property name="name" value="KK100" />
    </bean>

    <bean id="class1" class="work.starter.Klass">
        <property name="students">
            <list>
                <ref bean="student100" />
                <ref bean="student123" />
<!--                <bean class="Student">-->
<!--                    <property name="name" value="qq" />-->
<!--                    <property name="id" value="001" /> -->
<!--                </bean>-->
            </list>
        </property>
    </bean>


    <context:component-scan base-package="io.kimmking.spring02" />


 <!--   <bean id="aop1" class="io.kimmking.spring02.Aop1" />

    <bean id="aop2" class="io.kimmking.spring02.Aop2" />

&lt;!&ndash;    <aop:aspectj-autoproxy proxy-target-class="true" />&ndash;&gt;
    <aop:aspectj-autoproxy  />

    <aop:config>
        &lt;!&ndash;execution(* io.kimmking.spring02.aop.*.*(..) io.kimmking.spring02.aop.*.*包下的所有的接口的所有的方法，在spring容器里被调用的时候，就会被切入点拦截，执行切面上的方法&ndash;&gt;
        <aop:pointcut expression="execution(* io.kimmking.spring02.aop.*.*(..))" id="p1" /> &lt;!&ndash;切点&ndash;&gt;
        <aop:aspect ref="aop1"> &lt;!&ndash;切面 &ndash;&gt;
            &lt;!&ndash;pointcut-ref  绑定上切面&ndash;&gt;
            <aop:around method="around" pointcut-ref="p1" />
            <aop:before method="startTransaction" pointcut-ref="p1" /> &lt;!&ndash;前置通知&ndash;&gt;
            <aop:after-returning method="commitTransaction" pointcut-ref="p1"/> &lt;!&ndash;后置通知&ndash;&gt;
        </aop:aspect>
    </aop:config>-->

<!--    <context:annotation-config />-->
<!--    -->
    <bean id="school" class="work.starter.School"></bean>


</beans>
